function Set-AutoGeneratedExceptionMessage {
    <#
    .DESCRIPTION
        If the type of status message is 'exception' and an object of type 'ErrorRecord' is included generate
        a standardized error message.
    #>

    [OutputType([HashTable])]
    [CmdletBinding()]
    param ( [Parameter(Mandatory,ValueFromPipeline)] [HashTable] $MessageObject )

    begin {

        $exceptionTemplate = $( 'Unhandled Exception Error:'   ) + [System.Environment]::NewLine +
                             $('    Function: {0}, line: {1}'  ) + [System.Environment]::NewLine +
                             $('    Error Message: {2}'        ) + [System.Environment]::NewLine +
                             $('    Code Statement: {3}'       ) + [System.Environment]::NewLine +
                             $('    Stack Trace: {4}'          ) + [System.Environment]::NewLine +
                             $('    PowerShell: {5} {6} on {7}')

    }

    process {

        try {

            if ( $MessageObject.Type -eq 'Exception' ) {

                if ( $MessageObject.DebugObject ) {

                    if ( $MessageObject.DebugObject.GetType().Name -eq 'ErrorRecord' ) {

                        $statement = $MessageObject.DebugObject.InvocationInfo.Statement ??
                                    $MessageObject.DebugObject.InvocationInfo.Line ??
                                    '<Not available>'

                        $exceptionMessage = $exceptionTemplate -f $MessageObject.InvocationSource,
                                                                $MessageObject.DebugObject.InvocationInfo.ScriptLineNumber,
                                                                $MessageObject.DebugObject.Exception.Message,
                                                                $($statement.ToString().Trim()),
                                                                $MessageObject.DebugObject.ScriptStackTrace,
                                                                $PSVersionTable.PSVersion.ToString(),
                                                                $PSVersionTable.PSEdition,
                                                                $PSVersionTable.Platform

                        $MessageObject.Message += $exceptionMessage

                        $MessageObject.DebugObject = $null

                    }

                }

            }

            Write-Output $MessageObject

        }
        catch {

            Write-ExceptionMessage -e $_

        }

    }
}
